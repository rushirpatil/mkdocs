{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/","title":"ReactorCX Data Warehouse User Guide","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#introduction","title":"Introduction","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#purpose-of-this-guide","title":"Purpose of this Guide","text":"<p>Welcome to the Data Warehouse User Guide! This document aims to provide users with an understanding of the ReactorCX data warehouse, its architecture, and how to derive meaningful insights through querying. You will learn about various scenarios, metrics, and how to write queries to extract valuable information from the data model.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#intended-audience","title":"Intended Audience","text":"<p>This guide is intended for analysts, business users, and data professionals who interact with the data warehouse. Familiarity with SQL and data concepts is helpful but not mandatory.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#query-levels","title":"Query Levels","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#foundation-level","title":"Foundation Level:","text":"<p>At this foundational level, users learn to craft queries targeting individual tables and manipulate data by applying filters to specific fields.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#intermediate-level","title":"Intermediate Level:","text":"<p>Building upon the basics, this intermediate level equips users with the skills to compose queries that involve joining multiple tables. Users learn to integrate disparate data sources, enhancing query sophistication.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#advanced-level","title":"Advanced Level:","text":"<p>At the advanced stage, users delve into complex query construction, mastering intricate data retrieval scenarios through sophisticated table joins and nuanced filtering techniques.</p>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#understanding-reactorcx-data-model","title":"Understanding ReactorCX Data Model","text":"<p>A data model is a visual and structural representation of how data is organized in a database. It defines the relationships between different data elements. A well-designed data model ensures data accuracy, consistency, and efficient retrieval. It\u00a0forms the foundation for accurate reporting and meaningful insights.</p> <p>Link:\u00a0 RCX Data Model</p> <p>ReactorCX data warehouse data model consists of following subject areas:</p> <ul> <li> <p>Loyalty Members</p> </li> <li> <p>Loyalty Activities</p> </li> <li> <p>Loyalty Programs</p> </li> <li> <p>Loyalty References Data</p> </li> </ul>"},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#querying-data-for-metrics","title":"Querying data for Metrics","text":""},{"location":"Introduction%20to%20Data%20Warehouse%20User%20Guide/#tools-for-querying","title":"Tools for Querying","text":"<p>Use below SQL-based tool to query RCX data:</p> <ul> <li> <p>SQL workbench</p> </li> <li> <p>AWS console - Redshift Query Editor</p> </li> </ul>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Activities/","title":"Loyalty Activities","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Activities/#introduction","title":"Introduction","text":"<p>Interactions of the members with RCX is processed using activity.  </p> <p>For instance, Transactions like accrual activity, redemption activity, redeeming a reward, availing an offer or any purchases made by the members. When an activity is performed it trigger various rules and policies configured in RCX for the program to which the activity is associated with and sends a response based on that to the source of the activity trigger, which could be a POS, Online Store or Mobile App.</p> <p>Comprehensive Insights of Loyalty Activities loyalty_activities Members interactions with RCX are managed through activity processing. For example, activities such as earning points, redeeming rewards, using offers, or making purchases are all considered. Each activity triggers various rules and policies set up within RCX for the associated program. The system then sends a response based on these rules to the source of the activity trigger, which could be a point-of-sale system, online store, or mobile app.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Activities/#list-of-tables","title":"List Of Tables:","text":"<p>The table loyalty_activities is employed to retrieve the relevant fields.</p> <ul> <li> <p>loyalty_activities </p> </li> <li> <p>member_loyalty_ids</p> </li> </ul> <p>loyalty_activities can be retrieved from database in a few different ways, as listed below.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/","title":"Loyalty Members","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#introduction","title":"Introduction","text":"<p>Loyalty Members refers to the segment of a loyalty program dedicated to understanding and engaging with members who actively participate in the program. It focuses on analyzing member behavior, preferences, and interactions to tailor personalized experiences that enhance loyalty. By analyzing member data and preferences, the program can deliver personalized offers such as discounts, promotions, or bonus points on products or services that align with individual interests and purchase history.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#comprehensive-insights-of-loyalty-members","title":"Comprehensive Insights of Loyalty Members","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#member_loyalty_ids","title":"member_loyalty_ids","text":"<p>A loyalty_id is a unique identifier associated with a member and it is used to identify a member during a transaction. A member could have multiple loyalty_ids associated with him/her. A loyalty_id could be a membership card number, phone number, email, Facebook ID, twitter handler, etc.</p> <p>LIST OF TABLES: The table member_loyalty_ids is employed to retrieve the relevant fields</p> <ul> <li>member_loyalty_ids</li> </ul> <p>Loyalty information can be retrieved from the database in a few different ways, as listed below.</p> <ul> <li>How to retrieve member loyalty information based on loyalty_id ?</li> </ul> <pre><code>SELECT loyalty_id,\nmember_id,\nloyalty_id_name,\nstatus,\nis_primary\nFROM rcx_demo_db.member_loyalty_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from\nmember_loyalty_ids\nAND loyalty_id = '55199feed25b57bcb2f27c0484f1ff1c' -- To filter based\non loyalty_id\n;\n</code></pre> <p>Sample Data:</p> loyalty_id member_id loyalty_id_name status is_primary 55199feed25b57bcb2f27c0484f1ff1c 0bc3d8c77fffba0744e9eac007d65603 CardID Active false <ul> <li>How to retrieve loyalty_ids associated with a member based on     member_id value?</li> </ul> <pre><code>SELECT member_id,\nloyalty_id,\nloyalty_id_name,\nstatus,\nis_primary\nFROM rcx_demo_db.member_loyalty_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_loyalty_ids\nAND member_id = '6433c0df1a9965f7245d4051' -- To filter based on\nmember_id\n;\n</code></pre> <p>Sample Data:</p> member_id loyalty_id loyalty_id_name status is_primary 6433c0df1a9965f7245d4051 773339021758799 CardID Lost_Stolen false 6433c0df1a9965f7245d4051 773372030020098 CardID Active true 6433c0df1a9965f7245d4051 8152746904 AlternateID Active true <ul> <li>How to retrieve total number of cards for each loyalty_id_name?</li> </ul> <pre><code>SELECT loyalty_id_name,\nCOUNT(*) AS total_cards\nFROM rcx_demo_db.member_loyalty_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_loyalty_ids\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> loyalty_id_name total_cards AlternateID 5,651 CardID 33,879 <ul> <li>How to retrieve total number of cards for each card_status?</li> </ul> <pre><code>SELECT status AS card_status,\nCOUNT(*) AS total_cards\nFROM rcx_demo_db.member_loyalty_ids\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from loyaltyids\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> card_status total_cards Active 39,420 Locked 110"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#members","title":"members","text":"<p>The existing consumers who register for the loyalty programs of client are identified as members of RCX.</p> <p>LIST OF TABLES: The below mentioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>members</p> </li> <li> <p>member_loyalty_ids</p> </li> </ul> <p>Members details data can be retrieved in a few different ways, as listed below.</p> <ul> <li>How to retrieve members based on loyalty_id?</li> </ul> <pre><code>SELECT members.id AS member_id,\nmember_loyalty_ids.loyalty_id,\nmembers.member_status,\nmembers.enrollment_date\nFROM rcx_demo_db.members\nINNER JOIN rcx_demo_db.member_loyalty_ids\nON members.id = member_loyalty_ids.member_id\nWHERE members.delete_flag &lt;&gt; 'Y'-- To get only non-deleted records from members\nAND loyalty_id = '773372030020098' -- To filter based on loyalty_id\n;\n</code></pre> <p>Sample Data:</p> member_id loyalty_id member_status enrollment_date 6433c0df1a9965f7245d4051 773372030020098 Active 2004-12-17 05:00:00+00 <ul> <li>How to retrieve members info based on member_id?</li> </ul> <pre><code>SELECT id AS member_id,\nmember_status,\nenrollment_date\nFROM rcx_demo_db.members\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nAND id = '6433c0df1a9965f7245d4051'-- To filter based on id\n;\n</code></pre> <p>Sample Data:</p> member_id member_status enrollment_date 6433c0df1a9965f7245d4051 Active 2004-12-17 05:00:00+00 <ul> <li>How to retrieve the list of members enrolled on a certain enrollment_date?</li> </ul> <pre><code>SELECT id AS member_id,\nmember_status,\nenrollment_date,\nenrollment_source\nFROM rcx_demo_db.members\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nAND enrollment_date::DATE BETWEEN '2023-07-31' AND '2023-09-08' -- To filter by start and end dates of the enrollment_date\n;\n</code></pre> <p>Sample Data:</p> member_id member_status enrollment_date enrollment_source 78c1b29e80a98368daa2ca147f6c86ee PreEnrolled 2023-07-31 00:00:00+00 HPNS Lookup 94f9af926ca8574cd83264672d471c0f Active 2023-07-31 00:00:00+00 HPNS Lookup 2d60d8e746b9c12c547a713bc58a6509 Active 2023-07-31 00:00:00+00 UCD <ul> <li>How to retrieve total number of members enrolled in each month based on enrollment_date in a given year ?</li> </ul> <pre><code>SELECT TO_CHAR(enrollment_date::DATE,'mon-yyyy') AS enrollment_date,\nCOUNT(*) AS total_members\nFROM rcx_demo_db.members\nWHERE DATE_PART(year,enrollment_date::DATE) BETWEEN '2022' AND '2023' -- To filter based on enrollment_date\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_date total_members Jan-22 1,866 Jan-23 3,733 Feb-22 4,881 Feb-23 2,759 <ul> <li>How to retrieve total number of Members enrolled via different enrollment_source?</li> </ul> <pre><code>SELECT enrollment_source,\nCOUNT(*) AS total_members\nFROM rcx_demo_db.members\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_source total_members HPNS Conversion 23,958 HPNS Lookup 20,256 UCD 25,527 Unknown 21,402 <ul> <li>How to retrieve total number of Members enrolled using different enrollment_channel\u2019s ?</li> </ul> <pre><code>SELECT enrollment_channel,\nCOUNT(*) AS total_members\nFROM rcx_demo_db.members\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> enrollment_channel total_members WCON 24,532 WWEB 12,978 ORET 14,222 <ul> <li>How to retrieve total number of members for each member_status?</li> </ul> <pre><code>SELECT member_status,\nCOUNT(*) AS total_members\nFROM rcx_demo_db.members\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from members\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> member_status total_members PreEnrolled 18,409 Terminated 113 Active 21,008 <ul> <li>How to retrieve number of members deleted ?</li> </ul> <pre><code>SELECT delete_flagAS delete_status,\nCOUNT(*) AS total_members\nFROM rcx_sei_prod_db.members\nWHERE delete_flag= 'Y' -- To get only deleted records from members\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> delete_status total_members Y 1785679"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#member_purses","title":"member_purses","text":"<p>Purses are virtual containers or buckets that contain the points earned by the member. A member can have multiple purses, each purse can contain points earned for different transactions.</p> <p>LIST OF TABLES: The table member_purses is employed to retrieve the relevant fields</p> <ul> <li> <p>member_purses</p> </li> <li> <p>member_loyalty_ids</p> </li> </ul> <p>Purse and their balance data can be retrieved from the database in a few different ways, as listed below.</p> <ul> <li>How to retrieve all the purses of a member using loyalty_id?</li> </ul> <pre><code>SELECT member_loyalty_ids.loyalty_id,\nmember_purses.purse_policy_id,\nmember_purses.purse_name,\nmember_purses.purse_balance,\nmember_purses.available_balance\nFROM rcx_demo_db.member_purses\nINNER JOIN rcx_demo_db.member_loyalty_ids\nON member_purses.member_id = member_loyalty_ids.member_id\nWHERE loyalty_id IN ('773371089785182') -- To filter based on loyalty_id\nAND member_purses.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records\nfrom member_purses\n;\n</code></pre> <p>Sample Data:</p> loyalty_id purse_policy_id purse_name purse_balance available_balance 773371089785182 64019d5c2459ca0027fa78d9 SPWY Points 2232 2232 773371089785182 64019d5c2459ca0027fa78da SPWY Body Armor Club 0 0 773371089785182 64019d5c2459ca0027fa78dd SPWY Beverage Club 4 4 <ul> <li>How to retrieve all the purse details of a member based on member_id?</li> </ul> <pre><code>SELECT member_id,\npurse_policy_id,\npurse_name,\npurse_balance,\navailable_balance\nFROM rcx_demo_db.member_purses\nWHERE member_id IN ('6467358ccaaf25501b15a8ab') -- To filter based on member_id\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_purses\n;\n</code></pre> <p>Sample Data:</p> member_id purse_policy_id purse_name purse_balance available_balance 6467358ccaaf25501b15a8ab 64019d5c2459ca0027fa78d8 SPWY Frito Lay Club 0 0 6467358ccaaf25501b15a8ab 64019d5c2459ca0027fa78d9 SPWY Points 2232 2232 6467358ccaaf25501b15a8ab 64019d5c2459ca0027fa78dd SPWY Beverage Club 4 4 <ul> <li>How to retrieve the total balance available on each purse?</li> </ul> <pre><code>SELECT purse_name,\npurse_policy_id,\nSUM(purse_balance) purse_balance,\nSUM(available_balance) available_balance\nFROM rcx_demo_db.member_purses\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_purses\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> purse_name purse_policy_id purse_balance available_balance US 2022P7 Alto Pods Club 33273 630ec8e13c20c600262ef5c5 1923 1923 US 2022P6 CarWash Punch Card 62f5bf77b68e8c002847f1ca 22537 22537 <ul> <li>How to retrieve the total accrued points on each purse?</li> </ul> <pre><code>SELECT purse_name,\npurse_policy_id,\nSUM(accrued_pts) AS total_accrued_pts\nFROM rcx_demo_db.member_purses\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_purses\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> purse_name purse_policy_id total_accrued_pts US 2022P6 Pizza Club Punch Card 630ec8e13c20c600262ef5c3 144132 CA 2019P2 Coke Punch 5d80bd532a5c65010a678ce2 0 <ul> <li>How to retrieve the total redeemed points on each purse?</li> </ul> <pre><code>SELECT purse_name,\npurse_policy_id,\nSUM(redeemed_pts) AS total_redeemed_pts\nFROM rcx_demo_db.member_purses\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_purses\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> purse_name purse_policy_id total_redeemed_pts US 2023P3 Celsius 11th Free Punch 642f81106c7c5c00268904d1 111370 US 2024P1 Pizza 8th Free Punch 658ce9e376a16b0027a7e185 10594255 <ul> <li>How to retrieve the total expired points on each purse?</li> </ul> <pre><code>SELECT purse_name,\npurse_policy_id,\nSUM(expired_points) AS total_expired_points\nFROM rcx_demo_db.member_purses\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member purses\nGROUP BY 1,\n2;\n</code></pre> <p>Sample Data:</p> purse_name purse_policy_id total_expired_points US 2023P3 Coke 11th Free Punch 642f81106c7c5c00268904d2 48562 CA 2022P3 7th Coffee Punch 628308b5d172b200281e1d70 476247 <ul> <li>How to retrieve the number of members whose purse balance is not zero?</li> </ul> <pre><code>SELECT purse_name,\nCOUNT(DISTINCT member_id) AS members_count\nFROM rcx_demo_db.member_purses\nWHERE available_balance  &lt;&gt; 0 -- To filter based on available balance\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_purses\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> purse_name members_count SPWY Monster Java Club 490,974 SPWY Stokers Club 27,984 SPWY Tourney Club 39,609"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#member_tiers","title":"member_tiers","text":"<p>Tiers is an attribute associated with a member to define an order between levels by ranking them in order of achievement and categorizing/grouping them based on the achievements of the member.</p> <p>A tier that is assigned to a member based on their engagement with the loyalty program.</p> <p>LIST OF TABLES: The below mentioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>member_tiers</p> </li> <li> <p>member_loyalty_ids</p> </li> </ul> <p>Tiers data can be retrieved from the database in a few different ways, as listed below.</p> <p>* How to retrieve the tier details of a member using their loyalty_id?</p> <pre><code>SELECT member_loyalty_ids.loyalty_id,\nmember_tiers.tier_policy_level_id,\nmember_tiers.prev_level_name,\nmember_tiers.level_number,\nmember_tiers.level_name,\nmember_tiers.achieved_on_utc_ts,\nmember_tiers.requal_on_utc_ts\nFROM rcx_demo_db.member_tiers\nINNER JOIN rcx_demo_db.member_loyalty_ids\nON member_tiers.member_id = member_loyalty_ids.member_id\nWHERE member_loyalty_ids.loyalty_id IN ('70628001') -- To filter based on loyalty_id\nAND member_tiers.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tiers\n;\n</code></pre> <p>Sample Data:</p> loyalty_id tier_policy_level_id prev_level_name level_number level_name achieved_on_utc_ts requal_on_utc_ts 70628001 626a6d7328034c0263eb900f Sapphire 2 Pearl 2023-01-01 12:08:33+00 2025-02-01 07:59:59.999+00 <p>* How to retrieve member tiers based on member_id?</p> <pre><code>SELECT member_id,\ntier_policy_level_id,\nprev_level_name,\nlevel_number,\nlevel_name,\nachieved_on_utc_ts,\nrequal_on_utc_ts\nFROM rcx_demo_db.member_tiers\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tiers\nAND member_id = '6433c0df1a9965f7245d4051' -- To filter based on member_id\n;\n</code></pre> <p>Sample Data:</p> member_id tier_policy_level_id prev_level_name level_number level_name achieved_on_utc_ts requal_on_utc_ts 6433c0df1a9965f7245d4051 64019d5b2459ca0027fa78d7 1 Welcome 2019-01-01 00:00:00+00 3000-01-01 00:00:00+00 <p>* How to retrieve total no of tiers for each level_name? <pre><code>SELECT level_name,\nCOUNT(*) AS total_members\nFROM rcx_demo_db.member_tiers\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tiers\nGROUP BY 1;\n</code></pre></p> <p>Sample Data:</p> level_name total_members Sapphire 59,711,897 NOIR - No EC 2,026 Gold 238,532 <p>* How to retrieve total no of Tiers achieved based on achieved_on_utc_ts?</p> <pre><code>SELECT TO_CHAR(achieved_on_utc_ts::DATE,'mon-yyyy') AS\nachieved_on_utc_ts,\nCOUNT(*) AS total_tiers_achieved\nFROM rcx_demo_db.member_tiers\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tiers\nAND DATE_PART(year,achieved_on_utc_ts :: DATE) BETWEEN '2022' AND '2023' -- To filter based on achieved_on_utc_ts\nGROUP BY 1;\n</code></pre> <p>Sample Data:</p> achieved_on_utc_ts total_tiers_achieved Apr-2022 303,484 Apr-2023 296,561 Aug-2022 216,669 Aug-2023 275,699"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Members/#member_tier_histories","title":"member_tier_histories","text":"<p>The member_tier_histories tracks each member's tier changes over time. It includes the assigned tiers, and dates of assignment. This detailed record allows for monitoring the progression and status of members within the loyalty program, ensuring an accurate historical account of tier adjustments.</p> <p>LIST OF TABLES: The aforementioned fields can be retrieved by performing joins across the indicated tables.</p> <ul> <li> <p>member_tier_histories</p> </li> <li> <p>member_loyalty_ids</p> </li> </ul> <p>Tier history information can be retrieved from the database in a few different ways, as listed below.</p> <p>* How to retrieve the tiers assigned to a member based on their loyalty_id?</p> <pre><code>SELECT member_loyalty_ids.loyalty_id,\nmember_tier_histories.prev_tier_level,\nmember_tier_histories.current_tier_level,\nmember_tier_histories.assign_date\nFROM rcx_demo_db.member_tier_histories mt\nINNER JOIN rcx_demo_db.member_loyalty_ids mli\nON member_tier_histories.member_id = member_loyalty_ids.member_id\nWHERE member_tier_histories.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tier_histories\nAND member_loyalty_ids.loyalty_id IN ('70628001') -- To filter based on loyalty_id\n;\n</code></pre> <p>Sample Data: </p> loyalty_id PREV_TIER_LEVEL CURRENT_TIER_LEVEL ASSIGN_DATE 70628001 Sapphire Sapphire 2016-08-23 13:09:34.593+00 70628001 Sapphire Pearl 2023-01-01 12:08:33+00 <p>* How to retrieve the tier change histories for a member using their member_id?</p> <pre><code>SELECT member_id,\nprev_tier_level,\ncurrent_tier_level,\nassign_date\nFROM rcx_demo_db.member_tier_histories\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tier_histories\nAND member_id IN ('631810418e16f61a04cdd92a') -- To filter based on member_id\n;\n</code></pre> <p>Sample Data:</p> member_id prev_tier_level current_tier_level assign_date 631810418e16f61a04cdd92a Sapphire Sapphire 2016-08-23 13:09:34.593+00 631810418e16f61a04cdd92a Sapphire Pearl 2023-01-01 12:08:33+00 <p>* How to retrieve the tiers assigned to a member based on assign_date?</p> <pre><code>SELECT assign_date,\nmember_id,\nprev_tier_level,\ncurrent_tier_level\nFROM rcx_demo_db.member_tier_histories\nWHERE assign_date::DATE = '2022-08-01' -- To filter based on assign_date\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from member_tier_histories\n;\n</code></pre> <p>Sample Data: </p> assign_date member_id prev_tier_level current_tier_level 2022-08-01 07:00:00+00 62f454884796efc25210fc30 Sapphire Pearl 2022-08-01 00:19:04.062+00 62f42a5d9d01683a422f239b Sapphire Pearl 2022-08-01 22:12:31.623+00 62f443c8c45a043a80ffb943 Platinum Platinum - No EC"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/","title":"Loyalty Programs","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#introduction","title":"Introduction","text":"<p>Loyalty programs are designed to retain customers by inspiring continued purchases from your brand, rather than competitors. These initiatives acknowledge and incentivize ongoing interactions with the brand, with increased engagement translating into greater rewards over time.</p> <p>Through a loyalty program, businesses can extend points or perks to their clientele, who in turn redeem these rewards for discounts, complimentary items, special incentives, or exclusive privileges. The objective is to foster repeat transactions and cultivate a sense of trust and loyalty between customers and brands.</p>"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#comprehensive-insights-of-loyalty-programs","title":"Comprehensive Insights of Loyalty Programs","text":""},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#location_overrides","title":"location_overrides","text":"<p>location_overrides provide targeted rewards or deals that are constrained to specific geographic areas, utilizing location-specific data to customize offerings for customers in those regions</p> <p>LIST OF TABLES: The table for location_overrides is employed to fetch the corresponding fields mentioned above.</p> <ul> <li> <p>location_overrides</p> </li> <li> <p>location_overrides Details data can be retrieved in a few different ways, as listed below.</p> </li> <li> <p>How to retrieve the location_overrides details?</p> </li> </ul> <pre><code>SELECT location_id,\ntarget_id,\ntarget_type,\noptin_flag\nFROM rcx_demo_db.location_overrides\nWHERE delete_flag &lt;&gt; 'Y' --To get only non-deleted records from\nlocation_overrides\n;\n</code></pre> location_id target_id target_type optin_flag 5d039086eb256687e4ddc5fa 5df8b81a04f3a60172bfbfc6 RewardPolicy true 5d039087eb256687e4ddcb6f 5df8b81a04f3a60172bfbfc6 RewardPolicy false"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#loyalty_programs","title":"loyalty_programs","text":"<p>Stores basic information about the Loyalty Program like program_name, Description.</p> <p>We have the ability to customize the program according to the client's specifications. Within the loyalty program, we can manage specific functionalities such as loyalty points, offers, rewards, and more as needed.</p> <p>For a program to be functional there are three components: - Rules, Policies, and Flows. These in turn are based on reference data.</p> <p>LIST OF TABLES: The table for loyalty_programs is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>loyalty_programs</li> </ul> <p>loyalty_programs Details data can be retrieved in a few different ways, as listed below.</p> <ul> <li>How to retrieve the loyalty_programs details based on the program_name?</li> </ul> <pre><code>SELECT program_name,\nprogram_description,\nis_multinational\nFROM rcx_demo_db.loyalty_programs\nWHERE program_name = 'MGM Rewards' -- To filter based on program_name\nAND delete_flag &lt;&gt; 'Y' --To get only non-deleted records from programs\n;\n</code></pre> <p>Sample Data:</p> program_name program_description is_multinational MGM Rewards MGM Rewards false"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#purse_policies","title":"purse_policies","text":"<p>purse_policies are configurations to define the different categories of virtual currencies that are tracked for a member. Without a purse there can be no rewarding of points. There is no limitation to the quantity of purses created in a program. However, per user experience there is only one purse visible; the division of purses only exists in the backend of the loyalty system.</p> <p>LIST OF TABLES: The table for purse_policies is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>purse_policies</li> </ul> <p>purse_policies data can be retrieved from the database in a few different ways, as listed below</p> <ul> <li>How to retrieve the purse_policies details based on policy_name?</li> </ul> <pre><code>SELECT policy_name,\npolicy_description,\neffective_from,\nexpiration_dt,\npt_multiplier,\npolicy_group_name,\nperiod_start_date,\nperiod_end_date\nFROM rcx_demo_db.purse_policies\nWHERE policy_name = 'Tier Credits' -- To filter based on policy_name\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from purse_policies\n;\n</code></pre> <p>Sample Data:</p> policy_name policy_description effective_from expiration_dt pt_multiplier policy_group_name period_start_date period_end_date Tier Credits Tier Credits 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 Tier Credits 2023-01-01 08:00:00+00 2024-01-01 07:59:59.999+00 <ul> <li>How to retrieve active purse_policies details?</li> </ul> <pre><code>SELECT policy_name,\npolicy_description,\neffective_from,\nexpiration_dt,\npt_multiplier,\npolicy_group_name,\nperiod_start_date,\nperiod_end_date\nFROM rcx_demo_db.purse_policies\nWHERE ((policy_group_name IS NULL AND expiration_dt::DATE\\&gt;=\nSYSDATE::DATE) OR (policy_group_name IS NOT NULL AND\nperiod_end_date::DATE\\&gt;= SYSDATE::DATE))\nAND delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from purse_policies\n;\n</code></pre> <p>Sample Data:</p> POLICY _NAME policy_description effective_from expiration_dt pt_multiplier policy_group_name period_start_date period_end_date Deferred Debits Deferred Debits 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 Tier Credits 2024 Tier Credits 2024 2000-01-01 00:00:00+00 3000-01-01 23:59:59.999+00 10000.000 Tier Credits 2024-01-01 08:00:00+00 2025-01-01 07:59:59.999+00"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#tier_policies","title":"tier_policies","text":"<p>tier_policies are the configurations to define the classification of members based on milestones that have been awarded. They provide guidelines for how a tier shall operate. Often these guidelines dictate how many tiers are available in the program, how many levels exist within a tier, how many points required for movement between tiers, etc.</p> <p>LIST OF TABLES: The table for tier_policies is employed to fetch the corresponding fields mentioned above.</p> <ul> <li>tier_policies</li> </ul> <p>tier_policies data can be retrieved from the database in a few different ways, as listed below:</p> <ul> <li>How to retrieve the tier_policies details?</li> </ul> <pre><code>SELECT loyalty_program_id,\ntier_name,\nprimary_flag\nFROM rcx_demo_db.tier_policies\nWHERE delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from tier_policies\n;\n</code></pre> <p>Sample Data:</p> loyalty_program_id tier_name primary_flag 626a6d6128034c0263eb83dd Base true"},{"location":"ReactorCX%20Data%20Warehouse%20User%20Guide/Foundation%20Level%20Queries/Loyalty%20Programs/#tier_policy_levels","title":"tier_policy_levels","text":"<p>The tier_policy_levels table is responsible for storing and managing information related to the various levels of membership tiers for members.</p> <p>LIST OF TABLES: The table for tier_policy_levels is employed to fetch the corresponding fields mentioned above.</p> <ul> <li> <p>tier_policy_levels</p> </li> <li> <p>tier_policies</p> </li> <li> <p>How to retrieve the tier_policy_levels details based on Tier Name?</p> </li> </ul> <pre><code>SELECT TP.tier_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM rcx_demo_db.tier_policy_levels TPL\nINNER JOIN rcx_demo_db.tier_policies TP ON TPL.tier_policy_id = TP.id\nWHERE TP.tier_name = 'Base' -- To filter based on tier name\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from tier_policies\n;\n</code></pre> <p>Sample Data:</p> tier_name level_name is_default level_number level_threshold Base Pearl false 2 20,000 Base Gold false 3 75,000 <ul> <li>How to retrieve the tier_policy_levels details based on Tier Level Name?</li> </ul> <pre><code>SELECT TP.tier_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM rcx_demo_db.tier_policy_levels TPL\nINNER JOIN rcx_demo_db.tier_policies TP ON TPL.tier_policy_id = TP.id\nWHERE TPL.level_name = 'Gold' -- To filter based on level name\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from tier_policies\n;\n</code></pre> <p>Sample Data:</p> tier_name level_name is_default level_number level_threshold Base Gold false 3 75,000 <ul> <li>How to retrieve the tier_policy_levels details based on the level_threshold?</li> </ul> <pre><code>SELECT TP.tier_name,\nlevel_name,\nis_default,\nlevel_number,\nlevel_threshold\nFROM rcx_demo_db.tier_policy_levels TPL\nINNER JOIN rcx_demo_db.tier_policies TP ON TPL.tier_policy_id = TP.id\nWHERE level_threshold BETWEEN '20000' AND '200000' -- To filter based on level threshold\nAND TP.delete_flag &lt;&gt; 'Y' -- To get only non-deleted records from tier_policies\n;\n</code></pre> <p>Sample Data:</p> tier_name level_name is_default level_number level_threshold Base Pearl false 2 20,000 Base Gold false 3 75,000"}]}